#include <SDL2/SDL.h> // Simple Directmedia Layer lib has to be installed
#include <SDL2/SDL_image.h> // for loading PNG images
#include <memory>
#include <iostream>
#include <fstream>
#include "object.h"
using namespace std;


SDL_Renderer* ImageLoader::renderer;

// load an image as an SDL2 texture
SDL_Texture* ImageLoader::getImage(const string& filename){
    SDL_Surface* img = IMG_Load( filename.c_str() );
    // TODO: optimize surface: optimizedSurface = SDL_ConvertSurface( loadedSurface, gScreenSurface->format, 0 );
    if(!renderer){
        cout << "ERROR: SDL renderer was not set." << endl;
        return nullptr;
    }
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, img);
    SDL_FreeSurface(img);
    return texture;
}


const string OUTPUT_FILE_SCAD = "asm.scad";
const string TMP_FILE_SCAD = "tmp.scad";
const string TMP_FILE_IMG = "tmp.png";


bool makeObjectImage(shared_ptr<Object> const & obj){
    // save openscad code from a module/operator to a temp file
    ofstream file(TMP_FILE_SCAD);
    if(!obj->saveScad(file)){
        cout << "Error saving openscad code to temp file " << TMP_FILE_SCAD << endl;
        return false;
    }
    file.close();

    // run openscad to produce TMP_FILE_IMG from TMP_FILE_SCAD
    string cmd = "openscad --viewall --autocenter -o "+TMP_FILE_IMG+" "+TMP_FILE_SCAD;
    cout << "Running " << cmd << endl;
    // TODO: run openscad

    // load the image generated by openscad and set it for the object
    SDL_Texture* texture = ImageLoader::getImage(TMP_FILE_IMG);
    if(!texture){ return false; }
    obj->setImage(texture);
    return true;
}


// returns a root object that gets rendered and renders all of its children
std::shared_ptr<Object> initGui(int width, int height){
    srand (time(NULL));
    auto root   = make_shared<VerticalLayout>(width, height, true);
    auto menu   = make_shared<FlowLayout>(width,true); // top menu
    auto level2 = make_shared<FlowLayout>(width,true); // container for labels and main
    auto labels = make_shared<Labels>(ITEM_WIDTH, height-ITEM_HEIGHT); // module pics
    auto main   = make_shared<Main>(width-ITEM_WIDTH, height-ITEM_HEIGHT); // main "code" area

    auto dzView       = make_shared<DropZone>(DropZone::VIEW);
    auto union_       = make_shared<Operator>(Operator::UNION);
    auto difference   = make_shared<Operator>(Operator::DIFFERENCE);
    auto intersection = make_shared<Operator>(Operator::INTERSECTION);
    auto translate    = make_shared<Modifier>(Modifier::TRANSLATE);
    auto rotate       = make_shared<Modifier>(Modifier::ROTATE);
    auto cube         = make_shared<Shape>(Shape::CUBE);
    auto cylinder     = make_shared<Shape>(Shape::CYLINDER);
    auto sphere       = make_shared<Shape>(Shape::SPHERE);
    auto dzDelete     = make_shared<DropZone>(DropZone::DELETE); // TODO: pass labels and main in constructor

    root  ->addObject(menu);
    root  ->addObject(level2);
    level2->addObject(labels);
    level2->addObject(main);

    menu->addObject(dzView);
    menu->addObject(union_);
    menu->addObject(difference);
    menu->addObject(intersection);
    menu->addObject(translate);
    menu->addObject(rotate);
    menu->addObject(cube);
    menu->addObject(cylinder);
    menu->addObject(sphere);
    menu->addObject(dzDelete);

    root->setLocation(Point(0,0)); // perform layout
    return root;
}
