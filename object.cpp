#include <SDL2/SDL.h> // Simple Directmedia Layer lib has to be installed
#include <SDL2/SDL_image.h> // for loading PNG images
#include <iostream>
#include <fstream>
#include "object.h"
using namespace std;


SDL_Renderer* ImageLoader::renderer;

// load an image as an SDL2 texture
SDL_Texture* ImageLoader::getImage(const string& filename){
    SDL_Surface* img = IMG_Load( filename.c_str() );
    // TODO: optimize surface: optimizedSurface = SDL_ConvertSurface( loadedSurface, gScreenSurface->format, 0 );
    if(!renderer){
        cout << "ERROR: SDL renderer was not set." << endl;
        return nullptr;
    }
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, img);
    SDL_FreeSurface(img);
    return texture;
}


const string OUTPUT_FILE_SCAD = "asm.scad";
const string TMP_FILE_SCAD = "tmp.scad";
const string TMP_FILE_IMG = "tmp.png";


bool makeObjectImage(shared_ptr<Object>& obj){
    // save openscad code from a module/operator to a temp file
    ofstream file(TMP_FILE_SCAD);
    if(!obj->saveScad(file)){
        cout << "Error saving openscad code to temp file " << TMP_FILE_SCAD << endl;
        return false;
    }
    file.close();

    // run openscad to produce TMP_FILE_IMG from TMP_FILE_SCAD
    string cmd = "openscad --viewall --autocenter -o "+TMP_FILE_IMG+" "+TMP_FILE_SCAD;
    cout << "Running " << cmd << endl;
    // TODO: run openscad

    // load the image generated by openscad and set it for the object
    SDL_Texture* texture = ImageLoader::getImage(TMP_FILE_IMG);
    if(!texture){ return false; }
    obj->setImage(texture);
    return true;
}


Object::Object(const std::string imgFileName) {
    img = ImageLoader::getImage(imgFileName);
}
